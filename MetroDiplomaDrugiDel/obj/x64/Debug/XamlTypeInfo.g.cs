//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace MetroDiplomaDrugiDel
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            if(xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForType(type);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForName(typeName);
            }
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_ViewModelLocator() { return new global::MetroDiplomaDrugiDel.ViewModel.ViewModelLocator(); }

        private object Activate_1_MainViewModel() { return new global::MetroDiplomaDrugiDel.ViewModel.MainViewModel(); }

        private object Activate_3_ObservableObject() { return new global::GalaSoft.MvvmLight.ObservableObject(); }

        private object Activate_4_BingMapsView() { return new global::MetroDiplomaDrugiDel.BingMapsView(); }

        private object Activate_5_LayoutAwarePage() { return new global::MetroDiplomaDrugiDel.Common.LayoutAwarePage(); }

        private object Activate_6_MediaElementView() { return new global::MetroDiplomaDrugiDel.MediaElementView(); }

        private object Activate_7_MainPage() { return new global::MetroDiplomaDrugiDel.MainPage(); }

        private object Activate_8_Map() { return new global::Bing.Maps.Map(); }

        private object Activate_9_MapUIElementCollection() { return new global::Bing.Maps.MapUIElementCollection(); }

        private object Activate_14_MapTileLayerCollection() { return new global::Bing.Maps.MapTileLayerCollection(); }

        private object Activate_15_MapTileLayer() { return new global::Bing.Maps.MapTileLayer(); }

        private object Activate_16_LocationRectCollection() { return new global::Bing.Maps.LocationRectCollection(); }

        private object Activate_17_LocationRect() { return new global::Bing.Maps.LocationRect(); }

        private object Activate_18_Location() { return new global::Bing.Maps.Location(); }

        private object Activate_19_MapShapeLayerCollection() { return new global::Bing.Maps.MapShapeLayerCollection(); }

        private object Activate_20_MapShapeLayer() { return new global::Bing.Maps.MapShapeLayer(); }

        private object Activate_21_MapShapeCollection() { return new global::Bing.Maps.MapShapeCollection(); }

        private object Activate_26_Pushpin() { return new global::Bing.Maps.Pushpin(); }

        private object Activate_27_MapItemsControl() { return new global::Bing.Maps.MapItemsControl(); }

        private object Activate_28_VenueFloorDataSource() { return new global::Bing.Maps.VenueMaps.VenueFloorDataSource(); }

        private object Activate_33_LocationCollection() { return new global::Bing.Maps.LocationCollection(); }

        private void VectorAdd_9_MapUIElementCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.UIElement>)instance;
            var newItem = (global::Windows.UI.Xaml.UIElement)item;
            collection.Add(newItem);
        }

        private void VectorAdd_14_MapTileLayerCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Bing.Maps.MapTileLayer>)instance;
            var newItem = (global::Bing.Maps.MapTileLayer)item;
            collection.Add(newItem);
        }

        private void VectorAdd_16_LocationRectCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Bing.Maps.LocationRect>)instance;
            var newItem = (global::Bing.Maps.LocationRect)item;
            collection.Add(newItem);
        }

        private void VectorAdd_19_MapShapeLayerCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Bing.Maps.MapShapeLayer>)instance;
            var newItem = (global::Bing.Maps.MapShapeLayer)item;
            collection.Add(newItem);
        }

        private void VectorAdd_21_MapShapeCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Bing.Maps.MapShape>)instance;
            var newItem = (global::Bing.Maps.MapShape)item;
            collection.Add(newItem);
        }

        private void VectorAdd_29_IObservableVector(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }

        private void VectorAdd_33_LocationCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Bing.Maps.Location>)instance;
            var newItem = (global::Bing.Maps.Location)item;
            collection.Add(newItem);
        }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Object":
                xamlType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Object));
                break;

            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.UserControl));
                break;

            case "Windows.UI.Xaml.Controls.Page":
                xamlType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Page));
                break;

            case "Windows.UI.Xaml.Controls.Control":
                xamlType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Control));
                break;

            case "Windows.UI.Xaml.UIElement":
                xamlType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.UIElement));
                break;

            case "Boolean":
                xamlType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Boolean));
                break;

            case "String":
                xamlType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.String));
                break;

            case "Windows.UI.Xaml.DependencyObject":
                xamlType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.DependencyObject));
                break;

            case "Double":
                xamlType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Double));
                break;

            case "Int32":
                xamlType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Int32));
                break;

            case "Windows.UI.Xaml.Controls.ItemsControl":
                xamlType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.ItemsControl));
                break;

            case "MetroDiplomaDrugiDel.ViewModel.ViewModelLocator":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MetroDiplomaDrugiDel.ViewModel.ViewModelLocator), GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_ViewModelLocator;
                userType.AddMemberName("Main");
                xamlType = userType;
                break;

            case "MetroDiplomaDrugiDel.ViewModel.MainViewModel":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MetroDiplomaDrugiDel.ViewModel.MainViewModel), GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.Activator = Activate_1_MainViewModel;
                xamlType = userType;
                break;

            case "GalaSoft.MvvmLight.ViewModelBase":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::GalaSoft.MvvmLight.ViewModelBase), GetXamlTypeByName("GalaSoft.MvvmLight.ObservableObject"));
                xamlType = userType;
                break;

            case "GalaSoft.MvvmLight.ObservableObject":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::GalaSoft.MvvmLight.ObservableObject), GetXamlTypeByName("Object"));
                userType.Activator = Activate_3_ObservableObject;
                xamlType = userType;
                break;

            case "MetroDiplomaDrugiDel.BingMapsView":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MetroDiplomaDrugiDel.BingMapsView), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_4_BingMapsView;
                xamlType = userType;
                break;

            case "MetroDiplomaDrugiDel.Common.LayoutAwarePage":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MetroDiplomaDrugiDel.Common.LayoutAwarePage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_5_LayoutAwarePage;
                xamlType = userType;
                break;

            case "MetroDiplomaDrugiDel.MediaElementView":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MetroDiplomaDrugiDel.MediaElementView), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_6_MediaElementView;
                xamlType = userType;
                break;

            case "MetroDiplomaDrugiDel.MainPage":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::MetroDiplomaDrugiDel.MainPage), GetXamlTypeByName("MetroDiplomaDrugiDel.Common.LayoutAwarePage"));
                userType.Activator = Activate_7_MainPage;
                xamlType = userType;
                break;

            case "Bing.Maps.Map":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Bing.Maps.Map), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_8_Map;
                userType.SetContentPropertyName("Bing.Maps.Map.Children");
                userType.AddMemberName("Children");
                userType.AddMemberName("VenueManager");
                userType.AddMemberName("LogoPosition");
                userType.AddMemberName("CopyrightPosition");
                userType.AddMemberName("ScaleBarPosition");
                userType.AddMemberName("ShowNavigationBar");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("SuppressNetworkRequests");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("ShowScaleBar");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("Credentials");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("TileLayers");
                userType.AddMemberName("ShapeLayers");
                userType.AddMemberName("RotationEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("MaxZoomLevel");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("MinZoomLevel");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Culture");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("HomeRegion");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("TargetBounds");
                userType.AddMemberName("Bounds");
                userType.AddMemberName("ShowBreadcrumb");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("ShowBuildings");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("ShowTraffic");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("PreloadArea");
                userType.AddMemberName("ViewRestriction");
                userType.AddMemberName("MapType");
                userType.AddMemberName("TargetHeading");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("TargetZoomLevel");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("TargetCenter");
                userType.AddMemberName("Heading");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("ZoomLevel");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Center");
                userType.AddMemberName("MetersPerPixel");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case "Bing.Maps.MapUIElementCollection":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Bing.Maps.MapUIElementCollection), GetXamlTypeByName("Object"));
                userType.Activator = Activate_9_MapUIElementCollection;
                userType.CollectionAdd = VectorAdd_9_MapUIElementCollection;
                xamlType = userType;
                break;

            case "Bing.Maps.VenueMaps.VenueManager":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Bing.Maps.VenueMaps.VenueManager), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "Bing.Maps.MapForegroundPosition":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Bing.Maps.MapForegroundPosition), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("TopRight", global::Bing.Maps.MapForegroundPosition.TopRight);
                userType.AddEnumValue("TopLeft", global::Bing.Maps.MapForegroundPosition.TopLeft);
                userType.AddEnumValue("BottomRight", global::Bing.Maps.MapForegroundPosition.BottomRight);
                userType.AddEnumValue("BottomLeft", global::Bing.Maps.MapForegroundPosition.BottomLeft);
                xamlType = userType;
                break;

            case "System.Enum":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Enum), GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case "System.ValueType":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.ValueType), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "Bing.Maps.MapTileLayerCollection":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Bing.Maps.MapTileLayerCollection), GetXamlTypeByName("Object"));
                userType.Activator = Activate_14_MapTileLayerCollection;
                userType.CollectionAdd = VectorAdd_14_MapTileLayerCollection;
                xamlType = userType;
                break;

            case "Bing.Maps.MapTileLayer":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Bing.Maps.MapTileLayer), GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_15_MapTileLayer;
                userType.AddMemberName("Bounds");
                userType.AddMemberName("FillMissingTiles");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("MaxZoomLevel");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("MinZoomLevel");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Visible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("ZIndex");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("TileSource");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Opacity");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                xamlType = userType;
                break;

            case "Bing.Maps.LocationRectCollection":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Bing.Maps.LocationRectCollection), GetXamlTypeByName("Object"));
                userType.Activator = Activate_16_LocationRectCollection;
                userType.CollectionAdd = VectorAdd_16_LocationRectCollection;
                xamlType = userType;
                break;

            case "Bing.Maps.LocationRect":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Bing.Maps.LocationRect), GetXamlTypeByName("Object"));
                userType.Activator = Activate_17_LocationRect;
                userType.AddMemberName("West");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Southeast");
                userType.AddMemberName("South");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Northwest");
                userType.AddMemberName("North");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("East");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Height");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Width");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Center");
                xamlType = userType;
                break;

            case "Bing.Maps.Location":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Bing.Maps.Location), GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_18_Location;
                userType.AddMemberName("Longitude");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Latitude");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                xamlType = userType;
                break;

            case "Bing.Maps.MapShapeLayerCollection":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Bing.Maps.MapShapeLayerCollection), GetXamlTypeByName("Object"));
                userType.Activator = Activate_19_MapShapeLayerCollection;
                userType.CollectionAdd = VectorAdd_19_MapShapeLayerCollection;
                xamlType = userType;
                break;

            case "Bing.Maps.MapShapeLayer":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Bing.Maps.MapShapeLayer), GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_20_MapShapeLayer;
                userType.AddMemberName("Visible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("ZIndex");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("Shapes");
                xamlType = userType;
                break;

            case "Bing.Maps.MapShapeCollection":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Bing.Maps.MapShapeCollection), GetXamlTypeByName("Object"));
                userType.Activator = Activate_21_MapShapeCollection;
                userType.CollectionAdd = VectorAdd_21_MapShapeCollection;
                xamlType = userType;
                break;

            case "Bing.Maps.MapShape":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Bing.Maps.MapShape), GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.AddMemberName("Visible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "Bing.Maps.PreloadArea":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Bing.Maps.PreloadArea), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Bing.Maps.PreloadArea.None);
                userType.AddEnumValue("Small", global::Bing.Maps.PreloadArea.Small);
                userType.AddEnumValue("Medium", global::Bing.Maps.PreloadArea.Medium);
                userType.AddEnumValue("Large", global::Bing.Maps.PreloadArea.Large);
                xamlType = userType;
                break;

            case "Bing.Maps.MapViewRestriction":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Bing.Maps.MapViewRestriction), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Bing.Maps.MapViewRestriction.None);
                userType.AddEnumValue("ZoomOutToWholeWorld", global::Bing.Maps.MapViewRestriction.ZoomOutToWholeWorld);
                userType.AddEnumValue("MapOnly", global::Bing.Maps.MapViewRestriction.MapOnly);
                userType.AddEnumValue("OneWorldOnly", global::Bing.Maps.MapViewRestriction.OneWorldOnly);
                xamlType = userType;
                break;

            case "Bing.Maps.MapType":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Bing.Maps.MapType), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Road", global::Bing.Maps.MapType.Road);
                userType.AddEnumValue("Aerial", global::Bing.Maps.MapType.Aerial);
                userType.AddEnumValue("Birdseye", global::Bing.Maps.MapType.Birdseye);
                userType.AddEnumValue("Empty", global::Bing.Maps.MapType.Empty);
                xamlType = userType;
                break;

            case "Bing.Maps.Pushpin":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Bing.Maps.Pushpin), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_26_Pushpin;
                userType.AddMemberName("Text");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case "Bing.Maps.MapItemsControl":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Bing.Maps.MapItemsControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.ItemsControl"));
                userType.Activator = Activate_27_MapItemsControl;
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case "Bing.Maps.VenueMaps.VenueFloorDataSource":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Bing.Maps.VenueMaps.VenueFloorDataSource), GetXamlTypeByName("Object"));
                userType.Activator = Activate_28_VenueFloorDataSource;
                userType.AddMemberName("Items");
                AddToMapOfTypeToStandardName(typeof(global::Windows.Foundation.Collections.IObservableVector<global::System.Object>),
                                                   "Windows.Foundation.Collections.IObservableVector<Object>");
                userType.AddMemberName("Name");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case "Windows.Foundation.Collections.IObservableVector<Object>":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Windows.Foundation.Collections.IObservableVector<global::System.Object>), null);
                AddToMapOfTypeToStandardName(typeof(global::Windows.Foundation.Collections.IObservableVector<global::System.Object>),
                                                   "Windows.Foundation.Collections.IObservableVector<Object>");
                userType.CollectionAdd = VectorAdd_29_IObservableVector;
                xamlType = userType;
                break;

            case "Bing.Maps.VenueMaps.VenueEntity":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Bing.Maps.VenueMaps.VenueEntity), GetXamlTypeByName("Object"));
                userType.AddMemberName("Highlighted");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("LineWidth");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("HighlightColor");
                userType.AddMemberName("FillColor");
                userType.AddMemberName("LineColor");
                userType.AddMemberName("Type");
                userType.AddMemberName("PhoneNumber");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Name");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Outline");
                userType.AddMemberName("Id");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("FloorName");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Floor");
                userType.AddMemberName("Location");
                userType.AddMemberName("Description");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("CategoryName");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("CategoryId");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("BusinessId");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Address");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case "Windows.UI.Color":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Windows.UI.Color), GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case "Bing.Maps.VenueMaps.VenueEntityType":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Bing.Maps.VenueMaps.VenueEntityType), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Unknown", global::Bing.Maps.VenueMaps.VenueEntityType.Unknown);
                userType.AddEnumValue("AccessibleEntrance", global::Bing.Maps.VenueMaps.VenueEntityType.AccessibleEntrance);
                userType.AddEnumValue("AirportGroundTransportation", global::Bing.Maps.VenueMaps.VenueEntityType.AirportGroundTransportation);
                userType.AddEnumValue("ATM", global::Bing.Maps.VenueMaps.VenueEntityType.ATM);
                userType.AddEnumValue("BabyChangingFacilities", global::Bing.Maps.VenueMaps.VenueEntityType.BabyChangingFacilities);
                userType.AddEnumValue("Ballroom", global::Bing.Maps.VenueMaps.VenueEntityType.Ballroom);
                userType.AddEnumValue("BallroomDivision", global::Bing.Maps.VenueMaps.VenueEntityType.BallroomDivision);
                userType.AddEnumValue("Concourse", global::Bing.Maps.VenueMaps.VenueEntityType.Concourse);
                userType.AddEnumValue("Display", global::Bing.Maps.VenueMaps.VenueEntityType.Display);
                userType.AddEnumValue("ElevatedTrain", global::Bing.Maps.VenueMaps.VenueEntityType.ElevatedTrain);
                userType.AddEnumValue("Floor", global::Bing.Maps.VenueMaps.VenueEntityType.Floor);
                userType.AddEnumValue("Footprint", global::Bing.Maps.VenueMaps.VenueEntityType.Footprint);
                userType.AddEnumValue("Grass", global::Bing.Maps.VenueMaps.VenueEntityType.Grass);
                userType.AddEnumValue("Object", global::Bing.Maps.VenueMaps.VenueEntityType.Object);
                userType.AddEnumValue("LondonUndergroundEntrance", global::Bing.Maps.VenueMaps.VenueEntityType.LondonUndergroundEntrance);
                userType.AddEnumValue("ParkingArea", global::Bing.Maps.VenueMaps.VenueEntityType.ParkingArea);
                userType.AddEnumValue("PublicArea", global::Bing.Maps.VenueMaps.VenueEntityType.PublicArea);
                userType.AddEnumValue("Railroad", global::Bing.Maps.VenueMaps.VenueEntityType.Railroad);
                userType.AddEnumValue("Room", global::Bing.Maps.VenueMaps.VenueEntityType.Room);
                userType.AddEnumValue("SecureArea", global::Bing.Maps.VenueMaps.VenueEntityType.SecureArea);
                userType.AddEnumValue("SecurityLine", global::Bing.Maps.VenueMaps.VenueEntityType.SecurityLine);
                userType.AddEnumValue("Shop", global::Bing.Maps.VenueMaps.VenueEntityType.Shop);
                userType.AddEnumValue("ShopFood", global::Bing.Maps.VenueMaps.VenueEntityType.ShopFood);
                userType.AddEnumValue("SpecialArea", global::Bing.Maps.VenueMaps.VenueEntityType.SpecialArea);
                userType.AddEnumValue("SpecialRoom", global::Bing.Maps.VenueMaps.VenueEntityType.SpecialRoom);
                userType.AddEnumValue("Subway", global::Bing.Maps.VenueMaps.VenueEntityType.Subway);
                userType.AddEnumValue("Terminal", global::Bing.Maps.VenueMaps.VenueEntityType.Terminal);
                userType.AddEnumValue("Text", global::Bing.Maps.VenueMaps.VenueEntityType.Text);
                userType.AddEnumValue("TicketVendingMachine", global::Bing.Maps.VenueMaps.VenueEntityType.TicketVendingMachine);
                userType.AddEnumValue("Transportation", global::Bing.Maps.VenueMaps.VenueEntityType.Transportation);
                userType.AddEnumValue("VenuePatio", global::Bing.Maps.VenueMaps.VenueEntityType.VenuePatio);
                xamlType = userType;
                break;

            case "Bing.Maps.LocationCollection":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Bing.Maps.LocationCollection), GetXamlTypeByName("Object"));
                userType.Activator = Activate_33_LocationCollection;
                userType.CollectionAdd = VectorAdd_33_LocationCollection;
                xamlType = userType;
                break;

            case "Bing.Maps.VenueMaps.Floor":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Bing.Maps.VenueMaps.Floor), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "Bing.Maps.VenueMaps.VenueAddress":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Bing.Maps.VenueMaps.VenueAddress), GetXamlTypeByName("Bing.Maps.MapAddress"));
                xamlType = userType;
                break;

            case "Bing.Maps.MapAddress":
                userType = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Bing.Maps.MapAddress), GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                xamlType = userType;
                break;

            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Bing.Maps.Bing_Maps_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private object get_0_ViewModelLocator_Main(object instance)
        {
            var that = (global::MetroDiplomaDrugiDel.ViewModel.ViewModelLocator)instance;
            return that.Main;
        }
        private object get_1_Map_Children(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.Children;
        }
        private object get_2_Map_VenueManager(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.VenueManager;
        }
        private object get_3_Map_LogoPosition(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.LogoPosition;
        }
        private void set_3_Map_LogoPosition(object instance, object Value)
        {
            var that = (global::Bing.Maps.Map)instance;
            that.LogoPosition = (global::Bing.Maps.MapForegroundPosition)Value;
        }
        private object get_4_Map_CopyrightPosition(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.CopyrightPosition;
        }
        private void set_4_Map_CopyrightPosition(object instance, object Value)
        {
            var that = (global::Bing.Maps.Map)instance;
            that.CopyrightPosition = (global::Bing.Maps.MapForegroundPosition)Value;
        }
        private object get_5_Map_ScaleBarPosition(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.ScaleBarPosition;
        }
        private void set_5_Map_ScaleBarPosition(object instance, object Value)
        {
            var that = (global::Bing.Maps.Map)instance;
            that.ScaleBarPosition = (global::Bing.Maps.MapForegroundPosition)Value;
        }
        private object get_6_Map_ShowNavigationBar(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.ShowNavigationBar;
        }
        private void set_6_Map_ShowNavigationBar(object instance, object Value)
        {
            var that = (global::Bing.Maps.Map)instance;
            that.ShowNavigationBar = (global::System.Boolean)Value;
        }
        private object get_7_Map_SuppressNetworkRequests(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.SuppressNetworkRequests;
        }
        private void set_7_Map_SuppressNetworkRequests(object instance, object Value)
        {
            var that = (global::Bing.Maps.Map)instance;
            that.SuppressNetworkRequests = (global::System.Boolean)Value;
        }
        private object get_8_Map_ShowScaleBar(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.ShowScaleBar;
        }
        private void set_8_Map_ShowScaleBar(object instance, object Value)
        {
            var that = (global::Bing.Maps.Map)instance;
            that.ShowScaleBar = (global::System.Boolean)Value;
        }
        private object get_9_Map_Credentials(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.Credentials;
        }
        private void set_9_Map_Credentials(object instance, object Value)
        {
            var that = (global::Bing.Maps.Map)instance;
            that.Credentials = (global::System.String)Value;
        }
        private object get_10_Map_TileLayers(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.TileLayers;
        }
        private object get_11_MapTileLayer_Bounds(object instance)
        {
            var that = (global::Bing.Maps.MapTileLayer)instance;
            return that.Bounds;
        }
        private void set_11_MapTileLayer_Bounds(object instance, object Value)
        {
            var that = (global::Bing.Maps.MapTileLayer)instance;
            that.Bounds = (global::Bing.Maps.LocationRectCollection)Value;
        }
        private object get_12_LocationRect_West(object instance)
        {
            var that = (global::Bing.Maps.LocationRect)instance;
            return that.West;
        }
        private object get_13_LocationRect_Southeast(object instance)
        {
            var that = (global::Bing.Maps.LocationRect)instance;
            return that.Southeast;
        }
        private object get_14_LocationRect_South(object instance)
        {
            var that = (global::Bing.Maps.LocationRect)instance;
            return that.South;
        }
        private object get_15_LocationRect_Northwest(object instance)
        {
            var that = (global::Bing.Maps.LocationRect)instance;
            return that.Northwest;
        }
        private object get_16_LocationRect_North(object instance)
        {
            var that = (global::Bing.Maps.LocationRect)instance;
            return that.North;
        }
        private object get_17_LocationRect_East(object instance)
        {
            var that = (global::Bing.Maps.LocationRect)instance;
            return that.East;
        }
        private object get_18_LocationRect_Height(object instance)
        {
            var that = (global::Bing.Maps.LocationRect)instance;
            return that.Height;
        }
        private void set_18_LocationRect_Height(object instance, object Value)
        {
            var that = (global::Bing.Maps.LocationRect)instance;
            that.Height = (global::System.Double)Value;
        }
        private object get_19_LocationRect_Width(object instance)
        {
            var that = (global::Bing.Maps.LocationRect)instance;
            return that.Width;
        }
        private void set_19_LocationRect_Width(object instance, object Value)
        {
            var that = (global::Bing.Maps.LocationRect)instance;
            that.Width = (global::System.Double)Value;
        }
        private object get_20_LocationRect_Center(object instance)
        {
            var that = (global::Bing.Maps.LocationRect)instance;
            return that.Center;
        }
        private void set_20_LocationRect_Center(object instance, object Value)
        {
            var that = (global::Bing.Maps.LocationRect)instance;
            that.Center = (global::Bing.Maps.Location)Value;
        }
        private object get_21_MapTileLayer_FillMissingTiles(object instance)
        {
            var that = (global::Bing.Maps.MapTileLayer)instance;
            return that.FillMissingTiles;
        }
        private void set_21_MapTileLayer_FillMissingTiles(object instance, object Value)
        {
            var that = (global::Bing.Maps.MapTileLayer)instance;
            that.FillMissingTiles = (global::System.Boolean)Value;
        }
        private object get_22_MapTileLayer_MaxZoomLevel(object instance)
        {
            var that = (global::Bing.Maps.MapTileLayer)instance;
            return that.MaxZoomLevel;
        }
        private void set_22_MapTileLayer_MaxZoomLevel(object instance, object Value)
        {
            var that = (global::Bing.Maps.MapTileLayer)instance;
            that.MaxZoomLevel = (global::System.Double)Value;
        }
        private object get_23_MapTileLayer_MinZoomLevel(object instance)
        {
            var that = (global::Bing.Maps.MapTileLayer)instance;
            return that.MinZoomLevel;
        }
        private void set_23_MapTileLayer_MinZoomLevel(object instance, object Value)
        {
            var that = (global::Bing.Maps.MapTileLayer)instance;
            that.MinZoomLevel = (global::System.Double)Value;
        }
        private object get_24_MapTileLayer_Visible(object instance)
        {
            var that = (global::Bing.Maps.MapTileLayer)instance;
            return that.Visible;
        }
        private void set_24_MapTileLayer_Visible(object instance, object Value)
        {
            var that = (global::Bing.Maps.MapTileLayer)instance;
            that.Visible = (global::System.Boolean)Value;
        }
        private object get_25_MapTileLayer_ZIndex(object instance)
        {
            var that = (global::Bing.Maps.MapTileLayer)instance;
            return that.ZIndex;
        }
        private void set_25_MapTileLayer_ZIndex(object instance, object Value)
        {
            var that = (global::Bing.Maps.MapTileLayer)instance;
            that.ZIndex = (global::System.Int32)Value;
        }
        private object get_26_MapTileLayer_TileSource(object instance)
        {
            var that = (global::Bing.Maps.MapTileLayer)instance;
            return that.TileSource;
        }
        private void set_26_MapTileLayer_TileSource(object instance, object Value)
        {
            var that = (global::Bing.Maps.MapTileLayer)instance;
            that.TileSource = (global::System.String)Value;
        }
        private object get_27_MapTileLayer_Opacity(object instance)
        {
            var that = (global::Bing.Maps.MapTileLayer)instance;
            return that.Opacity;
        }
        private void set_27_MapTileLayer_Opacity(object instance, object Value)
        {
            var that = (global::Bing.Maps.MapTileLayer)instance;
            that.Opacity = (global::System.Double)Value;
        }
        private object get_28_Map_ShapeLayers(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.ShapeLayers;
        }
        private object get_29_MapShapeLayer_Visible(object instance)
        {
            var that = (global::Bing.Maps.MapShapeLayer)instance;
            return that.Visible;
        }
        private void set_29_MapShapeLayer_Visible(object instance, object Value)
        {
            var that = (global::Bing.Maps.MapShapeLayer)instance;
            that.Visible = (global::System.Boolean)Value;
        }
        private object get_30_MapShapeLayer_ZIndex(object instance)
        {
            var that = (global::Bing.Maps.MapShapeLayer)instance;
            return that.ZIndex;
        }
        private void set_30_MapShapeLayer_ZIndex(object instance, object Value)
        {
            var that = (global::Bing.Maps.MapShapeLayer)instance;
            that.ZIndex = (global::System.Int32)Value;
        }
        private object get_31_MapShapeLayer_Shapes(object instance)
        {
            var that = (global::Bing.Maps.MapShapeLayer)instance;
            return that.Shapes;
        }
        private void set_31_MapShapeLayer_Shapes(object instance, object Value)
        {
            var that = (global::Bing.Maps.MapShapeLayer)instance;
            that.Shapes = (global::Bing.Maps.MapShapeCollection)Value;
        }
        private object get_32_MapShape_Visible(object instance)
        {
            var that = (global::Bing.Maps.MapShape)instance;
            return that.Visible;
        }
        private void set_32_MapShape_Visible(object instance, object Value)
        {
            var that = (global::Bing.Maps.MapShape)instance;
            that.Visible = (global::System.Boolean)Value;
        }
        private object get_33_Map_RotationEnabled(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.RotationEnabled;
        }
        private object get_34_Map_MaxZoomLevel(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.MaxZoomLevel;
        }
        private object get_35_Map_MinZoomLevel(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.MinZoomLevel;
        }
        private object get_36_Map_Culture(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.Culture;
        }
        private void set_36_Map_Culture(object instance, object Value)
        {
            var that = (global::Bing.Maps.Map)instance;
            that.Culture = (global::System.String)Value;
        }
        private object get_37_Map_HomeRegion(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.HomeRegion;
        }
        private void set_37_Map_HomeRegion(object instance, object Value)
        {
            var that = (global::Bing.Maps.Map)instance;
            that.HomeRegion = (global::System.String)Value;
        }
        private object get_38_Map_TargetBounds(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.TargetBounds;
        }
        private object get_39_Map_Bounds(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.Bounds;
        }
        private object get_40_Map_ShowBreadcrumb(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.ShowBreadcrumb;
        }
        private void set_40_Map_ShowBreadcrumb(object instance, object Value)
        {
            var that = (global::Bing.Maps.Map)instance;
            that.ShowBreadcrumb = (global::System.Boolean)Value;
        }
        private object get_41_Map_ShowBuildings(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.ShowBuildings;
        }
        private void set_41_Map_ShowBuildings(object instance, object Value)
        {
            var that = (global::Bing.Maps.Map)instance;
            that.ShowBuildings = (global::System.Boolean)Value;
        }
        private object get_42_Map_ShowTraffic(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.ShowTraffic;
        }
        private void set_42_Map_ShowTraffic(object instance, object Value)
        {
            var that = (global::Bing.Maps.Map)instance;
            that.ShowTraffic = (global::System.Boolean)Value;
        }
        private object get_43_Map_PreloadArea(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.PreloadArea;
        }
        private void set_43_Map_PreloadArea(object instance, object Value)
        {
            var that = (global::Bing.Maps.Map)instance;
            that.PreloadArea = (global::Bing.Maps.PreloadArea)Value;
        }
        private object get_44_Map_ViewRestriction(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.ViewRestriction;
        }
        private void set_44_Map_ViewRestriction(object instance, object Value)
        {
            var that = (global::Bing.Maps.Map)instance;
            that.ViewRestriction = (global::Bing.Maps.MapViewRestriction)Value;
        }
        private object get_45_Map_MapType(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.MapType;
        }
        private void set_45_Map_MapType(object instance, object Value)
        {
            var that = (global::Bing.Maps.Map)instance;
            that.MapType = (global::Bing.Maps.MapType)Value;
        }
        private object get_46_Map_TargetHeading(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.TargetHeading;
        }
        private object get_47_Map_TargetZoomLevel(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.TargetZoomLevel;
        }
        private object get_48_Map_TargetCenter(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.TargetCenter;
        }
        private object get_49_Map_Heading(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.Heading;
        }
        private void set_49_Map_Heading(object instance, object Value)
        {
            var that = (global::Bing.Maps.Map)instance;
            that.Heading = (global::System.Double)Value;
        }
        private object get_50_Map_ZoomLevel(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.ZoomLevel;
        }
        private void set_50_Map_ZoomLevel(object instance, object Value)
        {
            var that = (global::Bing.Maps.Map)instance;
            that.ZoomLevel = (global::System.Double)Value;
        }
        private object get_51_Map_Center(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.Center;
        }
        private void set_51_Map_Center(object instance, object Value)
        {
            var that = (global::Bing.Maps.Map)instance;
            that.Center = (global::Bing.Maps.Location)Value;
        }
        private object get_52_Map_MetersPerPixel(object instance)
        {
            var that = (global::Bing.Maps.Map)instance;
            return that.MetersPerPixel;
        }
        private object get_53_Pushpin_Text(object instance)
        {
            var that = (global::Bing.Maps.Pushpin)instance;
            return that.Text;
        }
        private void set_53_Pushpin_Text(object instance, object Value)
        {
            var that = (global::Bing.Maps.Pushpin)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_54_VenueFloorDataSource_Items(object instance)
        {
            var that = (global::Bing.Maps.VenueMaps.VenueFloorDataSource)instance;
            return that.Items;
        }
        private object get_55_VenueFloorDataSource_Name(object instance)
        {
            var that = (global::Bing.Maps.VenueMaps.VenueFloorDataSource)instance;
            return that.Name;
        }
        private void set_55_VenueFloorDataSource_Name(object instance, object Value)
        {
            var that = (global::Bing.Maps.VenueMaps.VenueFloorDataSource)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_56_VenueEntity_Highlighted(object instance)
        {
            var that = (global::Bing.Maps.VenueMaps.VenueEntity)instance;
            return that.Highlighted;
        }
        private object get_57_VenueEntity_LineWidth(object instance)
        {
            var that = (global::Bing.Maps.VenueMaps.VenueEntity)instance;
            return that.LineWidth;
        }
        private void set_57_VenueEntity_LineWidth(object instance, object Value)
        {
            var that = (global::Bing.Maps.VenueMaps.VenueEntity)instance;
            that.LineWidth = (global::System.Double)Value;
        }
        private object get_58_VenueEntity_HighlightColor(object instance)
        {
            var that = (global::Bing.Maps.VenueMaps.VenueEntity)instance;
            return that.HighlightColor;
        }
        private void set_58_VenueEntity_HighlightColor(object instance, object Value)
        {
            var that = (global::Bing.Maps.VenueMaps.VenueEntity)instance;
            that.HighlightColor = (global::Windows.UI.Color)Value;
        }
        private object get_59_VenueEntity_FillColor(object instance)
        {
            var that = (global::Bing.Maps.VenueMaps.VenueEntity)instance;
            return that.FillColor;
        }
        private void set_59_VenueEntity_FillColor(object instance, object Value)
        {
            var that = (global::Bing.Maps.VenueMaps.VenueEntity)instance;
            that.FillColor = (global::Windows.UI.Color)Value;
        }
        private object get_60_VenueEntity_LineColor(object instance)
        {
            var that = (global::Bing.Maps.VenueMaps.VenueEntity)instance;
            return that.LineColor;
        }
        private void set_60_VenueEntity_LineColor(object instance, object Value)
        {
            var that = (global::Bing.Maps.VenueMaps.VenueEntity)instance;
            that.LineColor = (global::Windows.UI.Color)Value;
        }
        private object get_61_VenueEntity_Type(object instance)
        {
            var that = (global::Bing.Maps.VenueMaps.VenueEntity)instance;
            return that.Type;
        }
        private object get_62_VenueEntity_PhoneNumber(object instance)
        {
            var that = (global::Bing.Maps.VenueMaps.VenueEntity)instance;
            return that.PhoneNumber;
        }
        private object get_63_VenueEntity_Name(object instance)
        {
            var that = (global::Bing.Maps.VenueMaps.VenueEntity)instance;
            return that.Name;
        }
        private object get_64_VenueEntity_Outline(object instance)
        {
            var that = (global::Bing.Maps.VenueMaps.VenueEntity)instance;
            return that.Outline;
        }
        private object get_65_Location_Longitude(object instance)
        {
            var that = (global::Bing.Maps.Location)instance;
            return that.Longitude;
        }
        private void set_65_Location_Longitude(object instance, object Value)
        {
            var that = (global::Bing.Maps.Location)instance;
            that.Longitude = (global::System.Double)Value;
        }
        private object get_66_Location_Latitude(object instance)
        {
            var that = (global::Bing.Maps.Location)instance;
            return that.Latitude;
        }
        private void set_66_Location_Latitude(object instance, object Value)
        {
            var that = (global::Bing.Maps.Location)instance;
            that.Latitude = (global::System.Double)Value;
        }
        private object get_67_VenueEntity_Id(object instance)
        {
            var that = (global::Bing.Maps.VenueMaps.VenueEntity)instance;
            return that.Id;
        }
        private object get_68_VenueEntity_FloorName(object instance)
        {
            var that = (global::Bing.Maps.VenueMaps.VenueEntity)instance;
            return that.FloorName;
        }
        private object get_69_VenueEntity_Floor(object instance)
        {
            var that = (global::Bing.Maps.VenueMaps.VenueEntity)instance;
            return that.Floor;
        }
        private object get_70_VenueEntity_Location(object instance)
        {
            var that = (global::Bing.Maps.VenueMaps.VenueEntity)instance;
            return that.Location;
        }
        private object get_71_VenueEntity_Description(object instance)
        {
            var that = (global::Bing.Maps.VenueMaps.VenueEntity)instance;
            return that.Description;
        }
        private object get_72_VenueEntity_CategoryName(object instance)
        {
            var that = (global::Bing.Maps.VenueMaps.VenueEntity)instance;
            return that.CategoryName;
        }
        private object get_73_VenueEntity_CategoryId(object instance)
        {
            var that = (global::Bing.Maps.VenueMaps.VenueEntity)instance;
            return that.CategoryId;
        }
        private object get_74_VenueEntity_BusinessId(object instance)
        {
            var that = (global::Bing.Maps.VenueMaps.VenueEntity)instance;
            return that.BusinessId;
        }
        private object get_75_VenueEntity_Address(object instance)
        {
            var that = (global::Bing.Maps.VenueMaps.VenueEntity)instance;
            return that.Address;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember xamlMember = null;
            global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "MetroDiplomaDrugiDel.ViewModel.ViewModelLocator.Main":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MetroDiplomaDrugiDel.ViewModel.ViewModelLocator");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Main", "MetroDiplomaDrugiDel.ViewModel.MainViewModel");
                xamlMember.Getter = get_0_ViewModelLocator_Main;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.Map.Children":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Children", "Bing.Maps.MapUIElementCollection");
                xamlMember.Getter = get_1_Map_Children;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.Map.VenueManager":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "VenueManager", "Bing.Maps.VenueMaps.VenueManager");
                xamlMember.Getter = get_2_Map_VenueManager;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.Map.LogoPosition":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "LogoPosition", "Bing.Maps.MapForegroundPosition");
                xamlMember.Getter = get_3_Map_LogoPosition;
                xamlMember.Setter = set_3_Map_LogoPosition;
                break;
            case "Bing.Maps.Map.CopyrightPosition":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "CopyrightPosition", "Bing.Maps.MapForegroundPosition");
                xamlMember.Getter = get_4_Map_CopyrightPosition;
                xamlMember.Setter = set_4_Map_CopyrightPosition;
                break;
            case "Bing.Maps.Map.ScaleBarPosition":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "ScaleBarPosition", "Bing.Maps.MapForegroundPosition");
                xamlMember.Getter = get_5_Map_ScaleBarPosition;
                xamlMember.Setter = set_5_Map_ScaleBarPosition;
                break;
            case "Bing.Maps.Map.ShowNavigationBar":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "ShowNavigationBar", "Boolean");
                xamlMember.Getter = get_6_Map_ShowNavigationBar;
                xamlMember.Setter = set_6_Map_ShowNavigationBar;
                break;
            case "Bing.Maps.Map.SuppressNetworkRequests":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "SuppressNetworkRequests", "Boolean");
                xamlMember.Getter = get_7_Map_SuppressNetworkRequests;
                xamlMember.Setter = set_7_Map_SuppressNetworkRequests;
                break;
            case "Bing.Maps.Map.ShowScaleBar":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "ShowScaleBar", "Boolean");
                xamlMember.Getter = get_8_Map_ShowScaleBar;
                xamlMember.Setter = set_8_Map_ShowScaleBar;
                break;
            case "Bing.Maps.Map.Credentials":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Credentials", "String");
                xamlMember.Getter = get_9_Map_Credentials;
                xamlMember.Setter = set_9_Map_Credentials;
                break;
            case "Bing.Maps.Map.TileLayers":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "TileLayers", "Bing.Maps.MapTileLayerCollection");
                xamlMember.Getter = get_10_Map_TileLayers;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.MapTileLayer.Bounds":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.MapTileLayer");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Bounds", "Bing.Maps.LocationRectCollection");
                xamlMember.Getter = get_11_MapTileLayer_Bounds;
                xamlMember.Setter = set_11_MapTileLayer_Bounds;
                break;
            case "Bing.Maps.LocationRect.West":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.LocationRect");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "West", "Double");
                xamlMember.Getter = get_12_LocationRect_West;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.LocationRect.Southeast":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.LocationRect");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Southeast", "Bing.Maps.Location");
                xamlMember.Getter = get_13_LocationRect_Southeast;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.LocationRect.South":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.LocationRect");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "South", "Double");
                xamlMember.Getter = get_14_LocationRect_South;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.LocationRect.Northwest":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.LocationRect");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Northwest", "Bing.Maps.Location");
                xamlMember.Getter = get_15_LocationRect_Northwest;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.LocationRect.North":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.LocationRect");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "North", "Double");
                xamlMember.Getter = get_16_LocationRect_North;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.LocationRect.East":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.LocationRect");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "East", "Double");
                xamlMember.Getter = get_17_LocationRect_East;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.LocationRect.Height":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.LocationRect");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Height", "Double");
                xamlMember.Getter = get_18_LocationRect_Height;
                xamlMember.Setter = set_18_LocationRect_Height;
                break;
            case "Bing.Maps.LocationRect.Width":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.LocationRect");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Width", "Double");
                xamlMember.Getter = get_19_LocationRect_Width;
                xamlMember.Setter = set_19_LocationRect_Width;
                break;
            case "Bing.Maps.LocationRect.Center":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.LocationRect");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Center", "Bing.Maps.Location");
                xamlMember.Getter = get_20_LocationRect_Center;
                xamlMember.Setter = set_20_LocationRect_Center;
                break;
            case "Bing.Maps.MapTileLayer.FillMissingTiles":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.MapTileLayer");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "FillMissingTiles", "Boolean");
                xamlMember.Getter = get_21_MapTileLayer_FillMissingTiles;
                xamlMember.Setter = set_21_MapTileLayer_FillMissingTiles;
                break;
            case "Bing.Maps.MapTileLayer.MaxZoomLevel":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.MapTileLayer");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "MaxZoomLevel", "Double");
                xamlMember.Getter = get_22_MapTileLayer_MaxZoomLevel;
                xamlMember.Setter = set_22_MapTileLayer_MaxZoomLevel;
                break;
            case "Bing.Maps.MapTileLayer.MinZoomLevel":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.MapTileLayer");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "MinZoomLevel", "Double");
                xamlMember.Getter = get_23_MapTileLayer_MinZoomLevel;
                xamlMember.Setter = set_23_MapTileLayer_MinZoomLevel;
                break;
            case "Bing.Maps.MapTileLayer.Visible":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.MapTileLayer");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Visible", "Boolean");
                xamlMember.Getter = get_24_MapTileLayer_Visible;
                xamlMember.Setter = set_24_MapTileLayer_Visible;
                break;
            case "Bing.Maps.MapTileLayer.ZIndex":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.MapTileLayer");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "ZIndex", "Int32");
                xamlMember.Getter = get_25_MapTileLayer_ZIndex;
                xamlMember.Setter = set_25_MapTileLayer_ZIndex;
                break;
            case "Bing.Maps.MapTileLayer.TileSource":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.MapTileLayer");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "TileSource", "String");
                xamlMember.Getter = get_26_MapTileLayer_TileSource;
                xamlMember.Setter = set_26_MapTileLayer_TileSource;
                break;
            case "Bing.Maps.MapTileLayer.Opacity":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.MapTileLayer");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Opacity", "Double");
                xamlMember.Getter = get_27_MapTileLayer_Opacity;
                xamlMember.Setter = set_27_MapTileLayer_Opacity;
                break;
            case "Bing.Maps.Map.ShapeLayers":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "ShapeLayers", "Bing.Maps.MapShapeLayerCollection");
                xamlMember.Getter = get_28_Map_ShapeLayers;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.MapShapeLayer.Visible":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.MapShapeLayer");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Visible", "Boolean");
                xamlMember.Getter = get_29_MapShapeLayer_Visible;
                xamlMember.Setter = set_29_MapShapeLayer_Visible;
                break;
            case "Bing.Maps.MapShapeLayer.ZIndex":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.MapShapeLayer");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "ZIndex", "Int32");
                xamlMember.Getter = get_30_MapShapeLayer_ZIndex;
                xamlMember.Setter = set_30_MapShapeLayer_ZIndex;
                break;
            case "Bing.Maps.MapShapeLayer.Shapes":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.MapShapeLayer");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Shapes", "Bing.Maps.MapShapeCollection");
                xamlMember.Getter = get_31_MapShapeLayer_Shapes;
                xamlMember.Setter = set_31_MapShapeLayer_Shapes;
                break;
            case "Bing.Maps.MapShape.Visible":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.MapShape");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Visible", "Boolean");
                xamlMember.Getter = get_32_MapShape_Visible;
                xamlMember.Setter = set_32_MapShape_Visible;
                break;
            case "Bing.Maps.Map.RotationEnabled":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "RotationEnabled", "Boolean");
                xamlMember.Getter = get_33_Map_RotationEnabled;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.Map.MaxZoomLevel":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "MaxZoomLevel", "Double");
                xamlMember.Getter = get_34_Map_MaxZoomLevel;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.Map.MinZoomLevel":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "MinZoomLevel", "Double");
                xamlMember.Getter = get_35_Map_MinZoomLevel;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.Map.Culture":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Culture", "String");
                xamlMember.Getter = get_36_Map_Culture;
                xamlMember.Setter = set_36_Map_Culture;
                break;
            case "Bing.Maps.Map.HomeRegion":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "HomeRegion", "String");
                xamlMember.Getter = get_37_Map_HomeRegion;
                xamlMember.Setter = set_37_Map_HomeRegion;
                break;
            case "Bing.Maps.Map.TargetBounds":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "TargetBounds", "Bing.Maps.LocationRect");
                xamlMember.Getter = get_38_Map_TargetBounds;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.Map.Bounds":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Bounds", "Bing.Maps.LocationRect");
                xamlMember.Getter = get_39_Map_Bounds;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.Map.ShowBreadcrumb":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "ShowBreadcrumb", "Boolean");
                xamlMember.Getter = get_40_Map_ShowBreadcrumb;
                xamlMember.Setter = set_40_Map_ShowBreadcrumb;
                break;
            case "Bing.Maps.Map.ShowBuildings":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "ShowBuildings", "Boolean");
                xamlMember.Getter = get_41_Map_ShowBuildings;
                xamlMember.Setter = set_41_Map_ShowBuildings;
                break;
            case "Bing.Maps.Map.ShowTraffic":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "ShowTraffic", "Boolean");
                xamlMember.Getter = get_42_Map_ShowTraffic;
                xamlMember.Setter = set_42_Map_ShowTraffic;
                break;
            case "Bing.Maps.Map.PreloadArea":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "PreloadArea", "Bing.Maps.PreloadArea");
                xamlMember.Getter = get_43_Map_PreloadArea;
                xamlMember.Setter = set_43_Map_PreloadArea;
                break;
            case "Bing.Maps.Map.ViewRestriction":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "ViewRestriction", "Bing.Maps.MapViewRestriction");
                xamlMember.Getter = get_44_Map_ViewRestriction;
                xamlMember.Setter = set_44_Map_ViewRestriction;
                break;
            case "Bing.Maps.Map.MapType":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "MapType", "Bing.Maps.MapType");
                xamlMember.Getter = get_45_Map_MapType;
                xamlMember.Setter = set_45_Map_MapType;
                break;
            case "Bing.Maps.Map.TargetHeading":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "TargetHeading", "Double");
                xamlMember.Getter = get_46_Map_TargetHeading;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.Map.TargetZoomLevel":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "TargetZoomLevel", "Double");
                xamlMember.Getter = get_47_Map_TargetZoomLevel;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.Map.TargetCenter":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "TargetCenter", "Bing.Maps.Location");
                xamlMember.Getter = get_48_Map_TargetCenter;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.Map.Heading":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Heading", "Double");
                xamlMember.Getter = get_49_Map_Heading;
                xamlMember.Setter = set_49_Map_Heading;
                break;
            case "Bing.Maps.Map.ZoomLevel":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "ZoomLevel", "Double");
                xamlMember.Getter = get_50_Map_ZoomLevel;
                xamlMember.Setter = set_50_Map_ZoomLevel;
                break;
            case "Bing.Maps.Map.Center":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Center", "Bing.Maps.Location");
                xamlMember.Getter = get_51_Map_Center;
                xamlMember.Setter = set_51_Map_Center;
                break;
            case "Bing.Maps.Map.MetersPerPixel":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Map");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "MetersPerPixel", "Double");
                xamlMember.Getter = get_52_Map_MetersPerPixel;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.Pushpin.Text":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Pushpin");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.Getter = get_53_Pushpin_Text;
                xamlMember.Setter = set_53_Pushpin_Text;
                break;
            case "Bing.Maps.VenueMaps.VenueFloorDataSource.Items":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.VenueMaps.VenueFloorDataSource");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Items", "Windows.Foundation.Collections.IObservableVector<Object>");
                xamlMember.Getter = get_54_VenueFloorDataSource_Items;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.VenueMaps.VenueFloorDataSource.Name":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.VenueMaps.VenueFloorDataSource");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_55_VenueFloorDataSource_Name;
                xamlMember.Setter = set_55_VenueFloorDataSource_Name;
                break;
            case "Bing.Maps.VenueMaps.VenueEntity.Highlighted":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.VenueMaps.VenueEntity");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Highlighted", "Boolean");
                xamlMember.Getter = get_56_VenueEntity_Highlighted;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.VenueMaps.VenueEntity.LineWidth":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.VenueMaps.VenueEntity");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "LineWidth", "Double");
                xamlMember.Getter = get_57_VenueEntity_LineWidth;
                xamlMember.Setter = set_57_VenueEntity_LineWidth;
                break;
            case "Bing.Maps.VenueMaps.VenueEntity.HighlightColor":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.VenueMaps.VenueEntity");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "HighlightColor", "Windows.UI.Color");
                xamlMember.Getter = get_58_VenueEntity_HighlightColor;
                xamlMember.Setter = set_58_VenueEntity_HighlightColor;
                break;
            case "Bing.Maps.VenueMaps.VenueEntity.FillColor":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.VenueMaps.VenueEntity");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "FillColor", "Windows.UI.Color");
                xamlMember.Getter = get_59_VenueEntity_FillColor;
                xamlMember.Setter = set_59_VenueEntity_FillColor;
                break;
            case "Bing.Maps.VenueMaps.VenueEntity.LineColor":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.VenueMaps.VenueEntity");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "LineColor", "Windows.UI.Color");
                xamlMember.Getter = get_60_VenueEntity_LineColor;
                xamlMember.Setter = set_60_VenueEntity_LineColor;
                break;
            case "Bing.Maps.VenueMaps.VenueEntity.Type":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.VenueMaps.VenueEntity");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Type", "Bing.Maps.VenueMaps.VenueEntityType");
                xamlMember.Getter = get_61_VenueEntity_Type;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.VenueMaps.VenueEntity.PhoneNumber":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.VenueMaps.VenueEntity");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "PhoneNumber", "String");
                xamlMember.Getter = get_62_VenueEntity_PhoneNumber;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.VenueMaps.VenueEntity.Name":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.VenueMaps.VenueEntity");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_63_VenueEntity_Name;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.VenueMaps.VenueEntity.Outline":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.VenueMaps.VenueEntity");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Outline", "Bing.Maps.LocationCollection");
                xamlMember.Getter = get_64_VenueEntity_Outline;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.Location.Longitude":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Location");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Longitude", "Double");
                xamlMember.Getter = get_65_Location_Longitude;
                xamlMember.Setter = set_65_Location_Longitude;
                break;
            case "Bing.Maps.Location.Latitude":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.Location");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Latitude", "Double");
                xamlMember.Getter = get_66_Location_Latitude;
                xamlMember.Setter = set_66_Location_Latitude;
                break;
            case "Bing.Maps.VenueMaps.VenueEntity.Id":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.VenueMaps.VenueEntity");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Id", "Int32");
                xamlMember.Getter = get_67_VenueEntity_Id;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.VenueMaps.VenueEntity.FloorName":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.VenueMaps.VenueEntity");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "FloorName", "String");
                xamlMember.Getter = get_68_VenueEntity_FloorName;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.VenueMaps.VenueEntity.Floor":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.VenueMaps.VenueEntity");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Floor", "Bing.Maps.VenueMaps.Floor");
                xamlMember.Getter = get_69_VenueEntity_Floor;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.VenueMaps.VenueEntity.Location":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.VenueMaps.VenueEntity");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Location", "Bing.Maps.Location");
                xamlMember.Getter = get_70_VenueEntity_Location;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.VenueMaps.VenueEntity.Description":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.VenueMaps.VenueEntity");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Description", "String");
                xamlMember.Getter = get_71_VenueEntity_Description;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.VenueMaps.VenueEntity.CategoryName":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.VenueMaps.VenueEntity");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "CategoryName", "String");
                xamlMember.Getter = get_72_VenueEntity_CategoryName;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.VenueMaps.VenueEntity.CategoryId":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.VenueMaps.VenueEntity");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "CategoryId", "String");
                xamlMember.Getter = get_73_VenueEntity_CategoryId;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.VenueMaps.VenueEntity.BusinessId":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.VenueMaps.VenueEntity");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "BusinessId", "String");
                xamlMember.Getter = get_74_VenueEntity_BusinessId;
                xamlMember.SetIsReadOnly();
                break;
            case "Bing.Maps.VenueMaps.VenueEntity.Address":
                userType = (global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Bing.Maps.VenueMaps.VenueEntity");
                xamlMember = new global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlMember(this, "Address", "Bing.Maps.VenueMaps.VenueAddress");
                xamlMember.Getter = get_75_VenueEntity_Address;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlSystemBaseType
    {
        global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::MetroDiplomaDrugiDel.MetroDiplomaDrugiDel_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


